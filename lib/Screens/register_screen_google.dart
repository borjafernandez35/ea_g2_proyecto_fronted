import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:google_sign_in/google_sign_in.dart';
import 'package:spotfinder/Services/SignInService.dart';
import 'package:dio/dio.dart';
import 'dart:math';

import 'package:spotfinder/Utils/phone_utils.dart';



// ignore: must_be_immutable
class RegisterGoogleScreen extends StatefulWidget {
  final VoidCallback onRegistrationComplete;
  GoogleSignInAccount? currentUser;

  RegisterGoogleScreen(
      {required this.onRegistrationComplete, required this.currentUser});

  @override
  _RegisterGoogleScreenState createState() => _RegisterGoogleScreenState();
}

class _RegisterGoogleScreenState extends State<RegisterGoogleScreen> {
  final _formKey = GlobalKey<FormState>();
  final _nameController = TextEditingController();
  final _emailController = TextEditingController();
  String _autoGeneratedPassword = '';
  final _phoneController = TextEditingController();
  final _birthdayController = TextEditingController();
  final _imageController = TextEditingController();
  String _gender = 'Male';
  String _selectedPrefix = PhoneUtils.phonePrefixes[0];
  final Dio dio = Dio();
  

       // ignore: prefer_final_fields
       SignInService _signInService = SignInService(
      clientId: '125785942229-p83mg0gugi4cebkqos62m6q2l86jabkc.apps.googleusercontent.com',
    );

// Función para generar una contraseña aleatoria
  String generateRandomPassword({int length = 8}) {
    const charset =
        'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    Random random = Random();
    return List.generate(
        length, (index) => charset[random.nextInt(charset.length)]).join();
  }

  // Función para enviar datos al backend usando dio
  Future<void> sendDataToBackend() async {
    const String baseUrl = 'http://127.0.0.1:3000';

    try {
      // Construir el cuerpo de la solicitud
      var requestData = {
        'name': _nameController.text,
        'email': _emailController.text,
        'password':
            _autoGeneratedPassword, // Aquí puedes generar una contraseña aleatoria si es necesario
        'phone_number': _phoneController.text,
        'gender': _gender,
        'birthday': _birthdayController.text,
        'image': _imageController.text,
        // Otros campos según sea necesario
      };

      final response = await dio.post(
        '$baseUrl/user/google',
        data: requestData,
      );

      if (response.statusCode == 201) {
            var token = response.data['token'];
      var refresh_token = response.data['refreshToken'];
      var id = response.data['id'];
      _signInService.saveToken(token, refresh_token);
      _signInService.saveId(id);

      Get.offAllNamed("/home");
        // Llamar a la función de callback para indicar que el registro fue exitoso
        widget.onRegistrationComplete();
      } else {
        var errorMessage = 'Failed to create user: ${response.statusCode}';
        print(errorMessage);
        throw Exception(errorMessage);
      }
    } catch (e) {
      // ignore: deprecated_member_use
      if (e is DioError) {
        print('Error creating user: ${e.message}');
        if (e.response != null) {
          print('Response status: ${e.response!.statusCode}');
          print('Response data: ${e.response!.data}');
        } else {
          print('No response received.');
        }
      } else {
        print('Error creating user: $e');
      }
    }
  }

  Future<void> _selectDate(BuildContext context) async {
    final DateTime? picked = await showDatePicker(
      context: context,
      initialDate: DateTime.now(),
      firstDate: DateTime(1900),
      lastDate: DateTime(2100),
    );
    if (picked != null && picked != DateTime.now())
      setState(() {
        _birthdayController.text = "${picked.toLocal()}".split(' ')[0];
      });
  }

  @override
  void initState() {
    super.initState();
    // Puedes inicializar los campos de nombre y email con los datos del usuario de Google Sign-In
    _nameController.text = widget.currentUser?.displayName ?? '';
    _emailController.text = widget.currentUser?.email ?? '';
    _imageController.text = widget.currentUser?.photoUrl ?? '';
    _autoGeneratedPassword = generateRandomPassword();
  }

  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      title: Text('Sign Up'),
      content: Form(
        key: _formKey,
        child: SingleChildScrollView(
          child: Column(
            children: <Widget>[
              TextFormField(
                controller: _nameController,
                decoration: InputDecoration(labelText: 'Name'),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please, fill in your name';
                  }
                  return null;
                },
              ),
              TextFormField(
                controller: _emailController,
                decoration: InputDecoration(labelText: 'Email'),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please, fill in your email';
                  }
                  return null;
                },
              ),
               Row(
                children: [
                  Expanded(
                    flex: 1,
                    child: DropdownButtonFormField<String>(
                      value: _selectedPrefix,
                      decoration: InputDecoration(labelText: 'Prefix'),
                      items: PhoneUtils.phonePrefixes.map((String prefix) {
                        return DropdownMenuItem<String>(
                          value: prefix,
                          child: Text(prefix),
                        );
                      }).toList(),
                      onChanged: (newValue) {
                        setState(() {
                          _selectedPrefix = newValue!;
                        });
                      },
                    ),
                  ),
                  Expanded(
                    flex: 2,
                    child: TextFormField(
                      controller: _phoneController,
                      decoration: InputDecoration(labelText: 'Phone number'),
                      validator: (value) {
                        if (value == null || value.isEmpty) {
                          return 'Please, fill in your phone number';
                        }
                        if (!PhoneUtils.validatePhoneNumber(value)) {
                          return 'Invalid phone number';
                        }
                        return null;
                      },
                    ),
                  ),
                ],
              ),
              DropdownButtonFormField<String>(
                value: _gender,
                decoration: InputDecoration(labelText: 'Gender'),
                items: <String>['Male', 'Female', 'Other'].map((String value) {
                  return DropdownMenuItem<String>(
                    value: value,
                    child: Text(value),
                  );
                }).toList(),
                onChanged: (newValue) {
                  setState(() {
                    _gender = newValue!;
                  });
                },
              ),
              TextFormField(
                controller: _birthdayController,
                decoration: InputDecoration(
                  labelText: 'Birthday',
                  suffixIcon: IconButton(
                    icon: Icon(Icons.calendar_today),
                    onPressed: () => _selectDate(context),
                  ),
                ),
                readOnly: true,
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please, select the date';
                  }
                  return null;
                },
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  if (_formKey.currentState!.validate()) {
                    // Aquí puedes manejar el registro del usuario con los datos proporcionados
                    sendDataToBackend(); // Llama a la función para enviar los datos al backend
                    Navigator.of(context).pop();
                  }
                },
                child: Text('Sign Up'),
              ),
            ],
          ),
        ),
      ),
      actions: <Widget>[
        TextButton(
          child: Text('Close'),
          onPressed: () {
            Navigator.of(context).pop();
          },
        ),
      ],
    );
  }
}